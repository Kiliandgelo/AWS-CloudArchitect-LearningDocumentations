# IAM

## Identity and Access Management
Identity and Access Management is the primary service that handles authentication and authorization within AWS environments.


Systems architectures is incomplete without being able to control access in a granular way


IAM controls access to AWS Services via policies that can be attached to users, groups and roles. 


Users are given long term credentials to access AWS resources (username and password or access keys)


Roles allow for short-term access to resources when assumed using temporary access credentials


## Amazon Resource Name (ARN)
ARN's always begin with : arn:partition:service:region:account-id
* partition = aws or aws cn (for China)
* service = the AWS Service (s3, ec2, rds, dynamodb)
* region = region code (us east1, ap-southeast-2)

And depending on service , finish with:
* resource 
* resourcetype/resource
* resourcetype/resource/qualifier
* ....


In some cases wildcards are supported Fields with :: omit the value * is a wildcard match 

## IAM Policy
An IAM policy (policy document) is known as an identity policy when attached to an identity or a resource policy when attached to a resource. They have no effect until hey are attached to something.



A policy document is a list of statements


Each statement matches a request to AWS. Requests are matched based on their Action (or Actions) which are the API calls or operations being attempted and the Resource (or Resources) the request is against. A givent statement results as an Allow or Deny for the request. 


### Exam Tips: IAM Policies
* If a request isn't explicitly allowed , it is implicitly default denied
* If a request is explicitly denied , it overrides everything else.
* If a request is explicitly allowed , it is allowed unless denied by an explicit deny
* Remember : DENY -> ALLOW -> DENY
* Only Attached policies have any impact
* When evaluating policies , all applicable policies are merged : All identity (user, group, role) and any resource policies
* Managed policies allow the same policy to impact many identities
* Inline policies allow exceptions to be applied to identifies
* AWS managed policies are low overhead but lack flexibility
* Customer managed policies are flexible but require administration
* Inline and managed policies can apply to users, groups, and roles.

## IAM users
IAM users are a type of IAM identity suitable for long-term access for a known entity (human, service, applications)


Principals authenticate to IAM users either with a username and password or using access keys


### Exam Facts and Figures : IAM Users 
* Hard limit of 5.000 IAM users per account -- this is important as it can impact architectures
* 10 group membership per IAM user
* Default maximum of 10 managed policies per user
* No inline limit, but you cannot exceed 2048 characters for all inline policies on a IAM user
* 1 MFA per user
* 2 access keys per user

## IAM Group
An IAM group is a collection of IAM users. Groups allow easier administration over sets of IAM users. Inline and managed policies can be applied to group that flow on to members of that group.


Groups are NOT a true identity -- they cannot be the principal in a policy so they can't be used in resource policies


### Exam Facts and Figures : IAM Groups
* Groups are an admin feature to group IAM users
* Groups can contain many IAM users, and users can be in many groups
* IAM inline policies can be added to IAM groups -- and these flow on to IAM users who are members
* Managed IAM policies can be attached and flow on to IAM users who are members
* Groups are not "true" identities, and they can't be referenced from resource policies
* Groups have NO credentials

## Access keys
Access keys are a pair of values used by applications. SDKs or the AWS command line to authenticate to AWS.


Access keys consist of 2 parts, the access key ID and secret access key. The access key ID is the public part of the key and is stored by AWS once generated. 


The secret access key is the sensitive and private part of the access key, available only once when the access key is initially generated. It's stored only by the owner and should never be revealed. 


An IAM user is the only identity that uses access key. They are allowed 2 sets. They can be created, deleted, enabled, and disabled. 


They can't be used to log in to the console, and they don't expire. If anyone finds a set of access keys m they have access to the permissions of the IAM user to which they belong.

## IAM roles
IAM roles are assumed by another identity allowed in the trust policy -- IAM user, AWS service , another AWS account, web identity, or even an anonymous identity. When a role is assumed, the Security Token Service (STS) generated a time-limited set of access keys (temporary security credentials). These access keys have the permissions defined in the permissions policy. IAM roles have no long-term credentials (access keys or username and password)

### Exam Facts and Figures : IAM Roles
* IAM roles have no long-term credentials
* They are sts:AssumeRole by another identity : IAM users, AWS services, External accounts, Web identities
* Temporary security credentials are generated by STS
* Trust policy controls which identities can assume the role.
* Permissions policy defines the permissions provided
* Temporary credentials expire
* Example scenarios: Company Merger , AWS Service access, "Break-glass" style extra access, Cross-account, Web identity federation

## Multi-account and Orgs
AWS Organizations is a service for managing multiple accounts within a single business. Rather than managing many accounts, within many isolated sets of logins and individual bills. Organizations allows consolidation.


All accounts within an AWS Organization can consolidate bills into a single account -- one ball covering all business usage. Organizations can share bulk discounts and even easily manage accounts and permissions and limit account usage using service control policies.

## IAM Users
### Root User
* The user created when an AWS account is created
* The credentials are the email and password used when signing up for an AWS account
* By default, the root user has full administrative rights and access to every part of the account

### Best Practices for Root User 
* The root user should not be used for daily work and administration : Another user should be created for daily work that has admin rights.
* The root user account should not have access keys, delete them if they exist.
* The root user should always use multi-factor authentification (MFA) like Google Authenticator

### IAM Users 
* A new user has an implicit deny for all AWS services, requiring a policy be added to grant them access.
* User's receive unique credentials (username, password and possibly access keys)
* Users can have IAM policies applied directly to them, or they can be a member of a group that has policies attached.
* With policies an explicit deny always overrides an explicit allow from attached policies : For instance, all policies attached to a user will be ignored if a single deny ,all policy is added 

### Best Practices for Users
* MFA can and should be used for user accounts
* Access credentials are unique and should never be shared.

## IAM Groups
* Allow for policy assignments to multiple users at the same time
* Permissions may be assigned to group
* More organized and efficient way to manage users and policies
* Users may be a member of multiple groups

### Best Practices for IAM Groups
* Organize users by function (DB admins, developers/architects,etc)
* Assign IAM policies to groups , not individual users

## IAM Policies
* A document that states one or more permissions (JSON formatted )
* An explicit deny always overrides an explicit allow
* This allows for the use of a deny all policy to quickly restrict of access a user may have 


Managed Policies AWS provides pre-built policy templates to assign to users and groups. Example include: 
* Administrator access : full access to all AWS resources
* Power user access: Admin access except it does not allow user, group management
* Read-only access: Only view AWS resources (user can only view what it is as s3 Bucket)



Custom PoliciesYou can also create custom IAM permissions policies using the policy generator or write them from scratchMore than one policy can be attached to a user or group at the same time.Policies cannot be identity attached to AWS resources such as an EC2 instances 

## IAM Roles
* Temporary security credentials in AWS managed by Secure Token Service (STS)
* Another entity can assume the specific permissions defined by the role
* These entities includes: AWS resources (such as an EC2 instance) , A user outside our AWS account who needs temporary access

### Roles with AWS Services
* Roles must be used because policies cannot be directly attached to AWS Services
* Services can only have one role attached at a time
* You should never pass or share credentials to an EC2 instance -- instead , use roles
* Example : An EC2 instance needs to be able to read data from an S3 bucket: The instance assumes a role with S3 read only permissions from IAM, the instance can then read objects from the bucket specified in the role's policies.
* You may change roles an running EC2 instances through the console and CLI

### Other Uses of Roles 
* Cross-Account Access (Delegation): Provide access to another AWS user from another account
* Identity Federation: Users outside AWS can assume a role for temporary access to AWS accounts and resources, These users assume an identity provider access role, Example identity providers -> Active Directory, Single sign-on providers like Facebook, google Amazon....

## IAM Multi-Factor Authentication (MFA)

### What is Multi-Factor Authentication ? 
* A security method that requires multiple separate authentication
* One authentication option we have with AWS uses time based codes
* Familiar example of MFA: You go to an ATM to withdraw money from your bank account, This requires both the physical card and a PIN, This example use 2 factor authentication, which is a form of MFA

### AWS Scenario 
* Enable MFA in order to access the AWS Console 
* Users type in their username and password as well as a time based code: The username and password are not enough to be authenticated , The time based code can be as the user's computer , smartphone or a device they carry around
* This should be turned on for users who have access to the console
* MFA Delete for S3 Objects can be used to prevent accidental deletions.
